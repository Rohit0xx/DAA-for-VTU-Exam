#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <fstream>

using namespace std;
using namespace std::chrono;


void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);
    for(int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for(int i = 0; i < n2; ++i)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while(i < n1 && j < n2)
        arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
    
    while(i < n1) arr[k++] = L[i++];
    while(j < n2) arr[k++] = R[j++];
}


void mergeSort(vector<int>& arr, int left, int right) {
    if(left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}


int main() {
    ofstream outfile("merge_sort_times.csv");
    outfile << "n,Time(ms)\n";

    for(int n = 5000; n <= 50000; n += 5000) {
        vector<int> data(n);
        for(int i = 0; i < n; ++i)
            data[i] = rand();

        auto start = high_resolution_clock::now();
        mergeSort(data, 0, n - 1);
        auto stop = high_resolution_clock::now();

        auto duration = duration_cast<milliseconds>(stop - start).count();
        cout << "n = " << n << ", Time taken: " << duration << " ms" << endl;
        outfile << n << "," << duration << "\n";
    }

    outfile.close();
    return 0;
}
